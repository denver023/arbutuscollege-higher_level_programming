>>> from 7-base_geometry import BaseGeometry
>>> bg = BaseGeometry()

# Test instantiation
>>> isinstance(bg, BaseGeometry)
True

# Test area() raises Exception
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test integer_validator() with valid integer
>>> bg.integer_validator("age", 1)

# Test integer_validator() with valid integer
>>> bg.integer_validator("age", 5)

# Test integer_validator() with invalid type (string)
>>> bg.integer_validator("age", "4")
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test integer_validator() with invalid type (tuple)
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test integer_validator() with invalid type (list)
>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test integer_validator() with invalid type (boolean)
>>> bg.integer_validator("age", True)
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test integer_validator() with invalid type (set)
>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test integer_validator() with invalid type (None)
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test integer_validator() with zero (invalid value)
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

# Test integer_validator() with negative number (invalid value)
>>> bg.integer_validator("age", -4)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

